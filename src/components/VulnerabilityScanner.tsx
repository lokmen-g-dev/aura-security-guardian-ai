
import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Scan, Play, Pause, AlertCircle, CheckCircle, XCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface ScanResult {
  id: string;
  target: string;
  status: "scanning" | "completed" | "failed";
  progress: number;
  vulnerabilities: {
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  aiAnalysis?: string;
}

export const VulnerabilityScanner = () => {
  const [scanTarget, setScanTarget] = useState("");
  const [isScanning, setIsScanning] = useState(false);
  const [scanResults, setScanResults] = useState<ScanResult[]>([
    {
      id: "1",
      target: "192.168.1.100",
      status: "completed",
      progress: 100,
      vulnerabilities: { critical: 3, high: 7, medium: 12, low: 25 },
      aiAnalysis: "L'IA a détecté des vulnérabilités critiques dans les services SSH et HTTP. Mise à jour recommandée immédiatement."
    },
    {
      id: "2",
      target: "example.com",
      status: "scanning",
      progress: 65,
      vulnerabilities: { critical: 1, high: 2, medium: 5, low: 8 },
    }
  ]);
  
  const { toast } = useToast();

  const startScan = () => {
    if (!scanTarget.trim()) {
      toast({
        title: "Erreur",
        description: "Veuillez entrer une cible à scanner",
        variant: "destructive"
      });
      return;
    }

    setIsScanning(true);
    const newScan: ScanResult = {
      id: Date.now().toString(),
      target: scanTarget,
      status: "scanning",
      progress: 0,
      vulnerabilities: { critical: 0, high: 0, medium: 0, low: 0 }
    };

    setScanResults(prev => [newScan, ...prev]);
    
    // Simuler un scan progressif
    let progress = 0;
    const interval = setInterval(() => {
      progress += 10;
      setScanResults(prev => 
        prev.map(scan => 
          scan.id === newScan.id 
            ? { 
                ...scan, 
                progress,
                status: progress >= 100 ? "completed" : "scanning",
                vulnerabilities: progress >= 100 ? {
                  critical: Math.floor(Math.random() * 5),
                  high: Math.floor(Math.random() * 10),
                  medium: Math.floor(Math.random() * 15),
                  low: Math.floor(Math.random() * 20)
                } : scan.vulnerabilities,
                aiAnalysis: progress >= 100 ? "Analyse IA terminée. Recommandations de sécurité générées automatiquement." : undefined
              }
            : scan
        )
      );
      
      if (progress >= 100) {
        clearInterval(interval);
        setIsScanning(false);
        setScanTarget("");
        toast({
          title: "Scan terminé",
          description: `Analyse de ${scanTarget} complétée avec succès`,
        });
      }
    }, 800);
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "scanning":
        return <Scan className="h-5 w-5 text-yellow-400 animate-spin" />;
      case "completed":
        return <CheckCircle className="h-5 w-5 text-green-400" />;
      case "failed":
        return <XCircle className="h-5 w-5 text-red-400" />;
      default:
        return <AlertCircle className="h-5 w-5 text-gray-400" />;
    }
  };

  const getVulnerabilityColor = (type: string) => {
    switch (type) {
      case "critical":
        return "bg-red-600";
      case "high":
        return "bg-orange-600";
      case "medium":
        return "bg-yellow-600";
      case "low":
        return "bg-blue-600";
      default:
        return "bg-gray-600";
    }
  };

  return (
    <div className="space-y-6">
      <Card className="bg-slate-800 border-slate-700 p-6">
        <div className="flex items-center space-x-2 mb-6">
          <Scan className="h-6 w-6 text-blue-400" />
          <h2 className="text-2xl font-bold text-white">Scanner de Vulnérabilités IA</h2>
        </div>
        
        <div className="flex space-x-4 mb-6">
          <Input
            placeholder="IP, domaine ou réseau à scanner (ex: 192.168.1.0/24)"
            value={scanTarget}
            onChange={(e) => setScanTarget(e.target.value)}
            className="flex-1 bg-slate-700 border-slate-600 text-white"
          />
          <Button 
            onClick={startScan} 
            disabled={isScanning}
            className="bg-blue-600 hover:bg-blue-700"
          >
            {isScanning ? (
              <>
                <Pause className="h-4 w-4 mr-2" />
                En cours...
              </>
            ) : (
              <>
                <Play className="h-4 w-4 mr-2" />
                Lancer le Scan
              </>
            )}
          </Button>
        </div>

        <div className="space-y-4">
          {scanResults.map((result) => (
            <Card key={result.id} className="bg-slate-700 border-slate-600 p-4">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center space-x-3">
                  {getStatusIcon(result.status)}
                  <span className="text-white font-medium">{result.target}</span>
                  <Badge variant="outline" className="border-slate-500 text-slate-300">
                    {result.status === "scanning" ? "En cours" : 
                     result.status === "completed" ? "Terminé" : "Échec"}
                  </Badge>
                </div>
                <span className="text-slate-400 text-sm">
                  {result.progress}%
                </span>
              </div>
              
              <Progress value={result.progress} className="mb-4" />
              
              <div className="grid grid-cols-4 gap-4 mb-4">
                <div className="text-center">
                  <div className={`${getVulnerabilityColor("critical")} text-white px-3 py-2 rounded font-bold`}>
                    {result.vulnerabilities.critical}
                  </div>
                  <div className="text-slate-400 text-sm mt-1">Critiques</div>
                </div>
                <div className="text-center">
                  <div className={`${getVulnerabilityColor("high")} text-white px-3 py-2 rounded font-bold`}>
                    {result.vulnerabilities.high}
                  </div>
                  <div className="text-slate-400 text-sm mt-1">Élevées</div>
                </div>
                <div className="text-center">
                  <div className={`${getVulnerabilityColor("medium")} text-white px-3 py-2 rounded font-bold`}>
                    {result.vulnerabilities.medium}
                  </div>
                  <div className="text-slate-400 text-sm mt-1">Moyennes</div>
                </div>
                <div className="text-center">
                  <div className={`${getVulnerabilityColor("low")} text-white px-3 py-2 rounded font-bold`}>
                    {result.vulnerabilities.low}
                  </div>
                  <div className="text-slate-400 text-sm mt-1">Faibles</div>
                </div>
              </div>
              
              {result.aiAnalysis && (
                <div className="bg-blue-900/20 border border-blue-800 rounded p-3">
                  <div className="text-blue-400 font-medium mb-1">Analyse IA</div>
                  <div className="text-slate-300 text-sm">{result.aiAnalysis}</div>
                </div>
              )}
            </Card>
          ))}
        </div>
      </Card>
    </div>
  );
};
